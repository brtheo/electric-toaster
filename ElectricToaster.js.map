{"version":3,"file":"ElectricToaster.js","sourceRoot":"","sources":["src/ElectricToaster.ts"],"names":[],"mappings":"AAgBA,MAAM,CAAC,OAAO,OAAO,eAAe;IAIhC;;;;;;;;OAQG;IACH,YAAY,WAA6B,EAAE,KAAY;QAZvD,cAAS,GAAmB,IAAI,GAAG,EAAE,CAAA;QACrC,UAAK,GAA8B,EAAE,CAAA;QAYjC,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAA;QAEzC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC,CAAc,EAAE,EAAE;YACvD,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAA;YAClB,IAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,KAAK,EAAE,CAAA;QACpB,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;;OAGG;IACK,KAAK;QACT,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC9D,QAAQ,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,kBAAkB,EAAE,EAAC,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAA;IAC7G,CAAC;IAED;;;;;;OAMG;IACI,IAAI,CAAC,WAA6B,EAAE,IAAuB;QAC9D,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;QAC7C,MAAM,EAAC,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAC,GAAG,KAAK,CAAA;QACzC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,sBAAsB,IAAI,YAAY,WAAW,KAAK,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAC,SAAS,CAAC,CAAC,CAAA;QACjH,IAAG,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC;YAAE,IAAI,CAAC,KAAK,EAAE,CAAA;IAC5C,CAAC;IAED;;;;OAIG;IACI,gBAAgB,CAAC,WAAmB,EAAE,KAAY;QACrD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,EAAE,KAAK,CAAC,CAAA;IAC1C,CAAC;IAED;;;;OAIG;IACI,kBAAkB,CAAC,QAA2C;QACjE,QAAQ,CAAC,gBAAgB,CAAC,cAAc,EAAE,GAAG,EAAE;YAC3C,IAAI;gBACA,MAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAA;gBACzD,OAAO,QAAQ,CAAC,WAAyB,CAAC,CAAA;aAC7C;YAAC,MAAK,GAAE;QACb,CAAC,CAAC,CAAA;IACN,CAAC;CACJ","sourcesContent":["import { BurntToast } from \"./BurntToast\"\r\nexport type ToastAnimation = {\r\n    enter: [Keyframe[], KeyframeAnimationOptions],\r\n    leave:  [Keyframe[], KeyframeAnimationOptions]\r\n}\r\nexport type ToastTemplateData = {[key:string]: string | number | boolean}\r\nexport type ToastTemplate = (data: ToastTemplateData) => string\r\nexport type ToastType = 'action' | 'simple' | 'static'\r\nexport type ToastTemplateKey = string\r\nexport type Toast = {\r\n    template: ToastTemplate\r\n    type: ToastType\r\n    animation: ToastAnimation \r\n}  \r\ntype TemplateHolder = Map<ToastTemplateKey, Toast>\r\n\r\nexport default class ElectricToaster {\r\n    templates: TemplateHolder = new Map()\r\n    queue: [string,ToastAnimation][] = []\r\n\r\n    /**\r\n     * Defines a toast template\r\n     * @param templateKey Identifier of the template to use when invoking burn() method\r\n     * @param toast Object containing the template function, the type and the animations keyframes and options to use corresponding with the templateKey provided.\r\n     * @listens toastEaten \r\n     * \r\n     * @remarks \r\n     * \"Loop\" through the pending toast in the queue displaying them then deleting them until there's no pending toast left to be displayed.\r\n     */\r\n    constructor(templateKey: ToastTemplateKey, toast: Toast) {\r\n        this.registerTemplate(templateKey, toast)\r\n\r\n        document.addEventListener('toastEaten', (e: CustomEvent) => {\r\n            this.queue.shift()\r\n            if(this.queue[0])\r\n                this._fire()\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Add the {@link #BurntToast} element to the page.\r\n     * Inject the animations to the {@link #BurntToast} element.\r\n     */\r\n    private _fire(): void {\r\n        document.body.insertAdjacentHTML('beforeend',this.queue[0][0])  \r\n        document.dispatchEvent(new CustomEvent('provideAnimation', {cancelable: true, detail: this.queue[0][1]}))   \r\n    }\r\n\r\n    /**\r\n     * Add a pending toast to the queue.\r\n     * If there's no concurent toast to be displayed, it is in fact displayed right away.\r\n     * Else the display loop in the constructor will do the job\r\n     * @param templateKey Identifier of which template to use\r\n     * @param data Datas to be passed to this template to display to toast\r\n     */\r\n    public burn(templateKey: ToastTemplateKey, data: ToastTemplateData ): void {\r\n        const toast = this.templates.get(templateKey)\r\n        const {template, type, animation} = toast\r\n        this.queue.push([`<burnt-toast type=\"${type}\" class=\"${templateKey}\">${template(data)}</burnt-toast>`,animation])\r\n        if(this.queue.length === 1) this._fire()           \r\n    }\r\n\r\n    /**\r\n     * Add a new template for another type of toast\r\n     * @param templateKey Identifier of the template to use when invoking burn() method\r\n     * @param toast Object containing the template function, the type and the animations keyframes and options to use corresponding with the templateKey provided.\r\n     */\r\n    public registerTemplate(templateKey: string, toast: Toast): void {\r\n        this.templates.set(templateKey, toast)\r\n    }\r\n\r\n    /**\r\n     * Handles the registeration of eventListeners on inputs contained into an \"action\" type toast\r\n     * @param callback \r\n     * @returns callback with accecible <burnt-toast> element reference as parameter.\r\n     */\r\n    public registerToastEvent(callback: ($burntToast: BurntToast) => void): void{\r\n        document.addEventListener('toastBurning', () => {\r\n            try {\r\n                const $burntToast = document.querySelector('burnt-toast')\r\n                return callback($burntToast as BurntToast)\r\n            } catch{}\r\n        })\r\n    }\r\n}"]}