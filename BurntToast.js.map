{"version":3,"file":"BurntToast.js","sourceRoot":"","sources":["src/BurntToast.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,aAAa,EAAE,IAAI,EAAE,GAAG,EAAa,QAAQ,EAAiB,MAAM,aAAa,CAAA;AAGrG,IAAa,UAAU,GAAvB,MAAa,UAAW,SAAQ,UAAU;IAOtC;QACI,KAAK,EAAE,CAAA;QANX,SAAI,GAAc,QAAQ,CAAA;IAO1B,CAAC;IAED;;OAEG;IACH,iBAAiB;QACb,KAAK,CAAC,iBAAiB,EAAE,CAAA;QACzB,IAAI,CAAC,2BAA2B,EAAE,CAAA;QAClC,QAAQ,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,cAAc,EAAE,EAAC,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAC,CAAC,CAAC,CAAA;IAChH,CAAC;IAED;;OAEG;IACH,oBAAoB;QAChB,KAAK,CAAC,oBAAoB,EAAE,CAAA;QAC5B,QAAQ,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,YAAY,EAAE,EAAC,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAC,CAAC,CAAC,CAAA;IAC9G,CAAC;IAEO,2BAA2B;QAC/B;;;;WAIG;QACH,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,CAAc,EAAE,EAAE;YAC7D,CAAC,CAAC,eAAe,EAAE,CAAA;YACnB,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC,MAAM,CAAA;YACnC,IAAI,CAAC,sBAAsB,EAAE,CAAA;QACjC,CAAC,CAAC,CAAA;QACF;;WAEG;QACH,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,GAAG,EAAE,CACrC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,GAAG,EAAE,CACvB,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAA;QAE5B;;WAEG;QACH,IAAG,IAAI,CAAC,IAAI,KAAK,QAAQ;YACrB,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,CAChC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAA;IAC1C,CAAC;IAED;;;;OAIG;IACI,sBAAsB;QACzB,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAA;QAC3D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAC,OAAO,CAAC,CAAA;QAC5C,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,GAAG,EAAE,CAAE,IAAI,CAAC,sBAAsB,EAAE,CAAA;IAC9D,CAAC;IAED;;;;OAIG;IACI,sBAAsB;QACzB,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAA;QAC3D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAC,OAAO,CAAC,CAAA;QAC5C,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAA;IAC7C,CAAC;IAED,MAAM,KAAK,MAAM;QACb,OAAO,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA+BT,CAAA;IACL,CAAC;IACD,MAAM;QACF,OAAO,IAAI,CAAA;;;;SAIV,CAAA;IACL,CAAC;CACJ,CAAA;AAnHG;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;wCACC;AAFjB,UAAU;IADtB,aAAa,CAAC,aAAa,CAAC;GAChB,UAAU,CAqHtB;SArHY,UAAU","sourcesContent":["import {LitElement, customElement, html, css, CSSResult, property, TemplateResult} from 'lit-element'\r\nimport {ToastAnimation, ToastType} from './ElectricToaster'\r\n@customElement('burnt-toast')\r\nexport class BurntToast extends LitElement {\r\n    @property({type: String})\r\n    type: ToastType = 'simple'\r\n    private enter?: Animation\r\n    private leave?: Animation\r\n    private animationDefinition: ToastAnimation\r\n\r\n    constructor() {\r\n        super() \r\n    }\r\n\r\n    /**\r\n     * @fires toastBurning Is now added to DOM\r\n     */\r\n    connectedCallback() {\r\n        super.connectedCallback()\r\n        this._belongsToAnElectricToaster()\r\n        document.dispatchEvent(new CustomEvent('toastBurning', {cancelable: true, bubbles: false, composed: false}))\r\n    }\r\n    \r\n    /**\r\n     * @fires toastEaten Is now removed from DOM\r\n     */\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback()\r\n        document.dispatchEvent(new CustomEvent('toastEaten', {cancelable: true, bubbles: false, composed: false}))\r\n    }\r\n\r\n    private _belongsToAnElectricToaster() {\r\n        /**\r\n         * Wait for the {@link #animationDefinition} to be injected through event.\r\n         * Then start the {@link #enter} animation\r\n         * @listens provideAnimation\r\n         */\r\n        document.addEventListener('provideAnimation', (e: CustomEvent) => {\r\n            e.stopPropagation()\r\n            this.animationDefinition = e.detail\r\n            this.initiateEnterAnimation()    \r\n        })\r\n        /**\r\n         * Cancel the {@link #enter} and therefore the {@link #leave} animation when hovering the {@link #BurntToast} element\r\n         */\r\n        this.addEventListener('mouseenter', () => \r\n            this.enter.onfinish = () => \r\n                this.enter.cancel())\r\n        \r\n        /**\r\n         * If the {@link #BurntToast} element doesn't contain any input in it, clicking it fires {@link #initiateLeaveAnimation()}\r\n         */\r\n        if(this.type === 'simple') \r\n            this.addEventListener('click', () => \r\n                this.initiateLeaveAnimation())\r\n    }\r\n\r\n    /**\r\n     * Defines the keyframes and options for {@link #enter} animation.\r\n     * @remarks\r\n     * Defines the callback onfinish of the {@link #enter} animation to an anonymous function that returns the void method {@link #initiateLeaveAnimation()}.\r\n     */\r\n    public initiateEnterAnimation() {\r\n        const [Keyframes, options] = this.animationDefinition.enter\r\n        this.enter = this.animate(Keyframes,options)\r\n        this.enter.onfinish = () =>  this.initiateLeaveAnimation()\r\n    }\r\n\r\n    /**\r\n     * Defines the keyframes and options for t{@link #leave} animation.\r\n     * @remarks\r\n     * Defines the callback onfinish of {@link #leave} animation to an anonymous function that returns the void method remove() on the element.\r\n     */\r\n    public initiateLeaveAnimation() {\r\n        const [Keyframes, options] = this.animationDefinition.leave\r\n        this.leave = this.animate(Keyframes,options)\r\n        this.leave.onfinish = () => this.remove()\r\n    }\r\n\r\n    static get styles(): CSSResult {\r\n        return css`\r\n        :host {\r\n            bottom: 5px;\r\n            right: 5px;\r\n            top: unset;\r\n            left: unset;\r\n            position: fixed;\r\n            padding: 15px;\r\n            background-color: #fafafafa;\r\n            display: grid;\r\n            grid-template-columns: min-content 300px;\r\n            grid-template-rows: auto;\r\n            grid-gap: 15px;  \r\n            transition: box-shadow 0.2s;\r\n        }\r\n        :host(:hover) {\r\n            box-shadow: 2px 2px 5px 5px #25252579;\r\n        }\r\n        ::slotted(nth-firstchild(header)) {\r\n            grid-column: 1;\r\n            grid-row: 1/2;\r\n            background: red;\r\n        }\r\n        ::slotted(main) {\r\n            grid-column: 2;\r\n            grid-row: 1;\r\n        }\r\n        ::slotted(footer) {\r\n            grid-column: 2;\r\n            grid-row: 2;\r\n        }\r\n        `\r\n    }\r\n    render(): TemplateResult {\r\n        return html`\r\n            <slot name=\"header\"></slot>\r\n            <slot name=\"main\"></slot>\r\n            <slot name=\"footer\"></slot>           \r\n        `\r\n    }\r\n}"]}